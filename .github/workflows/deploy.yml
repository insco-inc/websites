name: Deploy

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  WEB_CONTAINER_NAME: insco/websites
  SENTINEL_CONTAINER_NAME: insco/sentinel

jobs:
  get-version:
    name: Get version
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version_step.outputs.version }}
      version_short: ${{ steps.version_step.outputs.version_short }}
    steps:
      - name: Set version
        id: version_step
        run: |
          echo "VERSION: $VERSION."
          
          VERSION_SHORT=$(echo "$VERSION" | sed -e "s/v//g")
          echo "VERSION_SHORT: $VERSION_SHORT."
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_short=$VERSION_SHORT" >> $GITHUB_OUTPUT
        env:
          VERSION: ${{ github.ref_name }}

  build-web:
    name: Build (Web)
    runs-on: ubuntu-22.04
    needs:
      - get-version
    steps:
      - uses: actions/checkout@v4

      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Docker build & push
        run: |
          docker build . --build-arg VERCEL_GIT_COMMIT_SHA=${{ github.sha }} -t ${{ secrets.REGISTRY_SERVER }}/${{ env.WEB_CONTAINER_NAME }}:${{ needs.get-version.outputs.version_short }}
          docker tag ${{ secrets.REGISTRY_SERVER }}/${{ env.WEB_CONTAINER_NAME }}:${{ needs.get-version.outputs.version_short }} ${{ secrets.REGISTRY_SERVER }}/${{ env.WEB_CONTAINER_NAME }}:latest
          docker push -a ${{ secrets.REGISTRY_SERVER }}/${{ env.WEB_CONTAINER_NAME }}

  build-sentinel:
    name: Build (Sentinel)
    runs-on: ubuntu-22.04
    needs:
      - get-version
    steps:
      - uses: actions/checkout@v4

      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Configure cert
        run: |
          mkdir ./certs
          # insco.cn
          echo "$INSCO_CERT_KEY" | base64 --decode > ./certs/insco.cn.key
          echo "$INSCO_CERT_PEM" | base64 --decode > ./certs/insco.cn.pem
          # insco.com.cn
          echo "$INSCO_COM_CERT_KEY" | base64 --decode > ./certs/insco.com.cn.key
          echo "$INSCO_COM_CERT_PEM" | base64 --decode > ./certs/insco.com.cn.pem
        env:
          INSCO_CERT_KEY: ${{ secrets.INSCO_CERT_KEY }}
          INSCO_CERT_PEM: ${{ secrets.INSCO_CERT_PEM }}
          INSCO_COM_CERT_KEY: ${{ secrets.INSCO_COM_CERT_KEY }}
          INSCO_COM_CERT_PEM: ${{ secrets.INSCO_COM_CERT_PEM }}

      - name: Docker build & push
        run: |
          docker build . -f Dockerfile_nginx -t ${{ secrets.REGISTRY_SERVER }}/${{ env.SENTINEL_CONTAINER_NAME }}:${{ needs.get-version.outputs.version_short }}
          docker tag ${{ secrets.REGISTRY_SERVER }}/${{ env.SENTINEL_CONTAINER_NAME }}:${{ needs.get-version.outputs.version_short }} ${{ secrets.REGISTRY_SERVER }}/${{ env.SENTINEL_CONTAINER_NAME }}:latest
          docker push -a ${{ secrets.REGISTRY_SERVER }}/${{ env.SENTINEL_CONTAINER_NAME }}

  deploy-to-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-22.04
    needs:
      - get-version
      - build-web
      - build-sentinel
    steps:
      - name: deploy to ecs
        uses: appleboy/ssh-action@v1.2.0
        env:
          INTERNAL_REGISTRY_SERVER: ${{ secrets.INTERNAL_REGISTRY_SERVER }}
          VERSION_SHORT: ${{ needs.get-version.outputs.version_short }}
          GIT_COMMIT_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          envs: INTERNAL_REGISTRY_SERVER,WEB_CONTAINER_NAME,SENTINEL_CONTAINER_NAME,VERSION_SHORT,GIT_COMMIT_SHA
          script: |
            if [ ! -d "/docker-compose" ]; then
              echo "ðŸŸ© Creating docker-compose directory"
              mkdir -p /docker-compose
            fi

            rm -rf /logs/sentinel
            if [ ! -d "/logs/sentinel" ]; then
              echo "ðŸŸ© Creating /logs/sentinel directory"
              mkdir -p /logs/sentinel;
            fi

            docker images -f "dangling=true" -q | grep . && docker images -f "dangling=true" -q | xargs docker rmi -f || echo "No unused <none> images found."

            cat <<EOL > /docker-compose/docker-compose-${VERSION_SHORT}.yml
            services:
              web:
                image: ${INTERNAL_REGISTRY_SERVER}/${WEB_CONTAINER_NAME}:${VERSION_SHORT}
                pull_policy: always
                restart: always
                environment:
                  NODE_ENV: production
                  NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA: ${GIT_COMMIT_SHA}

              nginx:
                image: ${INTERNAL_REGISTRY_SERVER}/${SENTINEL_CONTAINER_NAME}:${VERSION_SHORT}
                pull_policy: always
                restart: always
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - /logs/sentinel:/logs/sentinel
                links:
                  - web
                depends_on:
                  - web
            EOL

            docker compose -f /docker-compose/docker-compose-${{ needs.get-version.outputs.version_short }}.yml up -d

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.get-version.outputs.version }}
          tag_name: ${{ needs.get-version.outputs.version }}
          token: ${{ secrets.INSCO_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: rm -f ~/.ssh/id_rsa
